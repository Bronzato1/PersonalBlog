// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlog.Models;

namespace PersonalBlog.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200203202914_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonalBlog.Database", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnName("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Databases","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 0,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sql Server"
                        },
                        new
                        {
                            Id = 2,
                            Color = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ms Access"
                        },
                        new
                        {
                            Id = 3,
                            Color = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MySql"
                        },
                        new
                        {
                            Id = 4,
                            Color = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Omnis"
                        },
                        new
                        {
                            Id = 5,
                            Color = 11,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oracle"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Admins","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coca-Cola"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amazon"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Walt-Disney"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Starbucks"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Walmart"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johnson & Johnson"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PersonalBlog.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Gender")
                        .HasColumnName("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnName("Specialist")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Doctors","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 442, DateTimeKind.Local).AddTicks(1392),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9506),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9552),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9558),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9562),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9566),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9570),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9574),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9579),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9583),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9588),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9592),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9595),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9599),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9603),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 16,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9607),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 17,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9611),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 18,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9614),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 19,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9618),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9622),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9626),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9630),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 23,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9633),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 24,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9638),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 25,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9642),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 26,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9645),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 27,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9649),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 28,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9653),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 29,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9657),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 30,
                            Created = new DateTime(2020, 2, 3, 21, 29, 14, 444, DateTimeKind.Local).AddTicks(9661),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnName("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Languages","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Java"
                        },
                        new
                        {
                            Id = 2,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = 3,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 4,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 5,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aurelia"
                        },
                        new
                        {
                            Id = 6,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C#.Net"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Nurses","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DoctorId")
                        .HasColumnName("Doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnName("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HealthCondition")
                        .IsRequired()
                        .HasColumnName("Health_condition")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NurseId")
                        .HasColumnName("Nurse_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .HasName("doctor_id");

                    b.HasIndex("NurseId")
                        .HasName("nurse_id");

                    b.ToTable("Patients","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("admin");

                    b.Property<int>("DatabaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sector")
                        .HasColumnName("Sector")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DatabaseId");

                    b.ToTable("Resumes","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatabaseId = 1,
                            Date = new DateTime(2020, 2, 3, 21, 29, 14, 446, DateTimeKind.Local).AddTicks(8279),
                            Description = "This is the first item",
                            Sector = 0,
                            Title = "Item 1"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatabaseId = 2,
                            Date = new DateTime(2020, 2, 3, 21, 29, 14, 447, DateTimeKind.Local).AddTicks(1000),
                            Description = "This is the second item",
                            Sector = 5,
                            Title = "Item 2"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatabaseId = 3,
                            Date = new DateTime(2020, 2, 3, 21, 29, 14, 447, DateTimeKind.Local).AddTicks(1134),
                            Description = "This is the third item",
                            Sector = 1,
                            Title = "Item 3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlog.Models.Language", b =>
                {
                    b.HasOne("PersonalBlog.Models.Resume", null)
                        .WithMany("Languages")
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("PersonalBlog.Models.Patient", b =>
                {
                    b.HasOne("PersonalBlog.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("patients_ibfk_1")
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.Nurse", "Nurse")
                        .WithMany("Patients")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("patients_ibfk_2")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlog.Models.Resume", b =>
                {
                    b.HasOne("PersonalBlog.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.Database", "Database")
                        .WithMany()
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
