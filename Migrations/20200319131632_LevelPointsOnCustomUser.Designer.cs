// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlog.Models;

namespace PersonalBlog.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200319131632_LevelPointsOnCustomUser")]
    partial class LevelPointsOnCustomUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonalBlog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PersonalBlog.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PersonalBlog.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trans***"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glaxo Smith Kline (GSK)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fortis Insurance Belgium"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "T-Plan"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tott Systems"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sopres"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kraft Jacobs Suchard (KJS)  "
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JPass International"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coca-Cola"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cotrase"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comité Olympique Belge (COIB)"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baxter"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Akzonobel"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Expertise")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Networking")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PersonalBlog.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Gender")
                        .HasColumnName("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnName("Specialist")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Doctors","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 479, DateTimeKind.Local).AddTicks(1936),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7922),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7966),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7972),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7976),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7980),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7984),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7988),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7992),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(7996),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8000),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8004),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8008),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8012),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8016),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 16,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8019),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 17,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8024),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 18,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8028),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 19,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8031),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 20,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8035),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        },
                        new
                        {
                            Id = 21,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8039),
                            Email = "william@gmail.com",
                            Gender = 0,
                            Name = "William",
                            Password = "william",
                            Phone = "+034 76 87 42",
                            Specialist = "Pédiatre"
                        },
                        new
                        {
                            Id = 22,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8042),
                            Email = "shakespeare@gmail.com",
                            Gender = 0,
                            Name = "Shakespeare",
                            Password = "shakespeare",
                            Phone = "+034 76 87 42",
                            Specialist = "Orthophoniste"
                        },
                        new
                        {
                            Id = 23,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8046),
                            Email = "vanespen@gmail.com",
                            Gender = 0,
                            Name = "Vanespen",
                            Password = "vanespen",
                            Phone = "+034 76 87 42",
                            Specialist = "Podologue"
                        },
                        new
                        {
                            Id = 24,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8050),
                            Email = "dehondt@gmail.com",
                            Gender = 0,
                            Name = "Dehondt",
                            Password = "dehondt",
                            Phone = "+034 76 87 42",
                            Specialist = "Chirurgien"
                        },
                        new
                        {
                            Id = 25,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8054),
                            Email = "henri@gmail.com",
                            Gender = 0,
                            Name = "Henri",
                            Password = "henri",
                            Phone = "+034 76 87 42",
                            Specialist = "Cardiologue"
                        },
                        new
                        {
                            Id = 26,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8058),
                            Email = "craemer@gmail.com",
                            Gender = 0,
                            Name = "Craemer",
                            Password = "craemer",
                            Phone = "+034 76 87 42",
                            Specialist = "Anesthésiste"
                        },
                        new
                        {
                            Id = 27,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8062),
                            Email = "paul@gmail.com",
                            Gender = 0,
                            Name = "Paul",
                            Password = "paul",
                            Phone = "+034 76 87 42",
                            Specialist = "Gastroentérologue"
                        },
                        new
                        {
                            Id = 28,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8067),
                            Email = "dupuit@gmail.com",
                            Gender = 0,
                            Name = "Dupuit",
                            Password = "dupuit",
                            Phone = "+034 76 87 42",
                            Specialist = "Gynécologue"
                        },
                        new
                        {
                            Id = 29,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8071),
                            Email = "gérard@gmail.com",
                            Gender = 0,
                            Name = "Gérard",
                            Password = "gérard",
                            Phone = "+034 76 87 42",
                            Specialist = "Hématologue"
                        },
                        new
                        {
                            Id = 30,
                            Created = new DateTime(2020, 3, 19, 14, 16, 32, 481, DateTimeKind.Local).AddTicks(8075),
                            Email = "vaneste@gmail.com",
                            Gender = 0,
                            Name = "Vaneste",
                            Password = "vaneste",
                            Phone = "+034 76 87 42",
                            Specialist = "Néphrologue"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin");

                    b.Property<string>("CustomUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sector")
                        .HasColumnName("Sector")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Staff")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomUserId");

                    b.ToTable("Experiences","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.ExperienceKeyword", b =>
                {
                    b.Property<int>("ExperienceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeywordId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("TEXT");

                    b.HasKey("ExperienceId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("ExperienceKeywords");
                });

            modelBuilder.Entity("PersonalBlog.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color")
                        .HasColumnName("Color")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedTime")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("CreatedUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedUser")
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Keywords","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 16,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visual-Basic (VB6)"
                        },
                        new
                        {
                            Id = 2,
                            Color = 21,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visual-Basic for Appl. (VBA)"
                        },
                        new
                        {
                            Id = 3,
                            Color = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C-Sharp (C#)"
                        },
                        new
                        {
                            Id = 4,
                            Color = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Crystal Reports"
                        },
                        new
                        {
                            Id = 5,
                            Color = 11,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aurelia"
                        },
                        new
                        {
                            Id = 6,
                            Color = 19,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VBScript"
                        },
                        new
                        {
                            Id = 7,
                            Color = 25,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C++"
                        },
                        new
                        {
                            Id = 8,
                            Color = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VB.Net"
                        },
                        new
                        {
                            Id = 9,
                            Color = 20,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Microsoft Excel"
                        },
                        new
                        {
                            Id = 10,
                            Color = 23,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Powerbuilder"
                        },
                        new
                        {
                            Id = 11,
                            Color = 0,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sql Server"
                        },
                        new
                        {
                            Id = 12,
                            Color = 24,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ms Access"
                        },
                        new
                        {
                            Id = 13,
                            Color = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mainframe (DB2)"
                        },
                        new
                        {
                            Id = 14,
                            Color = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Omnis"
                        },
                        new
                        {
                            Id = 15,
                            Color = 10,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oracle"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Nurses","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Created")
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<int>("DoctorId")
                        .HasColumnName("Doctor_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnName("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HealthCondition")
                        .IsRequired()
                        .HasColumnName("Health_condition")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NurseId")
                        .HasColumnName("Nurse_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .HasName("doctor_id");

                    b.HasIndex("NurseId")
                        .HasName("nurse_id");

                    b.ToTable("Patients","dbo");
                });

            modelBuilder.Entity("PersonalBlog.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomUserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlog.Category", b =>
                {
                    b.HasOne("PersonalBlog.Models.Post", null)
                        .WithMany("Categories")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("PersonalBlog.Models.Comment", b =>
                {
                    b.HasOne("PersonalBlog.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("PersonalBlog.Models.Experience", b =>
                {
                    b.HasOne("PersonalBlog.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("CustomUserId");
                });

            modelBuilder.Entity("PersonalBlog.Models.ExperienceKeyword", b =>
                {
                    b.HasOne("PersonalBlog.Models.Experience", "Experience")
                        .WithMany("ExperienceKeywords")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.Keyword", "Keyword")
                        .WithMany("ExperienceKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlog.Models.Patient", b =>
                {
                    b.HasOne("PersonalBlog.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("patients_ibfk_1")
                        .IsRequired();

                    b.HasOne("PersonalBlog.Models.Nurse", "Nurse")
                        .WithMany("Patients")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("patients_ibfk_2")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlog.Models.Post", b =>
                {
                    b.HasOne("PersonalBlog.Models.CustomUser", "CustomUser")
                        .WithMany()
                        .HasForeignKey("CustomUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
